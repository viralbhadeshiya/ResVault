export declare type Language = 'english' | 'korean';
export declare type RawMnemonicArray = string[];
export declare type RawMnemonicIndexArray = number[];
export interface Mnemonic {
    readonly len: number;
    readonly lang: Language;
    readonly raw: RawMnemonicArray;
    readonly rawIndex: RawMnemonicIndexArray;
    toString(): string;
    kill(): void;
}
export declare class MnemonicImpl implements Mnemonic {
    readonly lang: Language;
    readonly raw: RawMnemonicArray;
    readonly rawIndex: RawMnemonicIndexArray;
    private constructor();
    static new(language: Language, rawArray: RawMnemonicArray): Mnemonic;
    static unsafeNew(language: Language, mnemonicArray: RawMnemonicArray, mnemonicIndexArray: RawMnemonicIndexArray): Mnemonic;
    get len(): number;
    static indexOfMnemonicWord(s: string, lang: Language): number;
    static isValidRawMnemonicArray(lang: Language, raw: RawMnemonicArray, callback?: (index: number) => void): boolean;
    toString(): string;
    kill(): void;
}
