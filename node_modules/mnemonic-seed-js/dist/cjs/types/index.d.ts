/// <reference types="node" />
export * as F from "./functions";
export type { EntropyBits, Language, Mnemonic, Binary } from "./functions";
import type { EntropyBits, Language, Mnemonic, Binary } from "./functions";
export declare type SeedOption = {
    passphrase?: string;
    bitsSize?: EntropyBits;
    language?: Language;
};
export interface Seed {
    readonly privatekey: Buffer;
    readonly chaincode: Buffer;
    readonly buffer: Buffer;
    readonly mnemonic: Mnemonic;
    readonly entropy: Binary;
    kill(): void;
}
export default class implements Seed {
    readonly entropy: Binary;
    readonly mnemonic: Mnemonic;
    readonly buffer: Buffer;
    static get defaultSeedOption(): SeedOption;
    static new(option?: SeedOption): Seed;
    /**
     *
     * @param src - Binary or (`Hex`)string;
     * @param option - SeedOption = {
                     - passphrase?: string;
                     - bitsSize?: EntropyBits;
                     - language?: Language;
                     - };
     * @returns
     */
    static fromEntropy(src: Binary | string, option?: SeedOption): Seed;
    static fromMnemonic(src: Mnemonic | string, option?: SeedOption): Seed;
    static fromSeed(src: Seed): Seed;
    readonly privatekey: Buffer;
    readonly chaincode: Buffer;
    private constructor();
    kill(): void;
}
