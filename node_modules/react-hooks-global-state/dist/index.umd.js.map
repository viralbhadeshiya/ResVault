{"version":3,"file":"index.umd.js","sources":["../src/createGlobalState.ts","../src/createStore.ts"],"sourcesContent":["import { SetStateAction, useCallback } from 'react';\n\nimport create from 'zustand';\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => (\n  isFunction(newValue) ? newValue(oldValue) : newValue\n);\n\n/**\n * Create a global state.\n *\n * It returns a set of functions\n * - `useGlobalState`: a custom hook works like React.useState\n * - `getGlobalState`: a function to get a global state by key outside React\n * - `setGlobalState`: a function to set a global state by key outside React\n * - `subscribe`: a function that subscribes to state changes\n *\n * @example\n * import { createGlobalState } from 'react-hooks-global-state';\n *\n * const { useGlobalState } = createGlobalState({ count: 0 });\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createGlobalState = <State extends object>(initialState: State) => {\n  const useStore = create<State>(() => initialState);\n\n  type StateKeys = keyof State;\n  const keys = Object.keys(initialState);\n\n  const setGlobalState = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    update: SetStateAction<State[StateKey]>,\n  ) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    useStore.setState((previousState) => ({\n      [stateKey]: updateValue(previousState[stateKey], update),\n    } as Pick<State, StateKey> as Partial<State>));\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const selector = useCallback((state: State) => state[stateKey], [stateKey]);\n    const partialState = useStore(selector);\n    const updater = useCallback(\n      (u: SetStateAction<State[StateKey]>) => setGlobalState(stateKey, u),\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  const getGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    return useStore.getState()[stateKey];\n  };\n\n  const subscribe = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    listener: (value: State[StateKey]) => void,\n  ) => {\n    useStore.subscribe((state, prevState) => {\n      if (state[stateKey] !== prevState[stateKey]) {\n        listener(state[stateKey]);\n      }\n    });\n  };\n\n  return {\n    useGlobalState,\n    getGlobalState,\n    setGlobalState,\n    subscribe,\n  };\n};\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nimport { Reducer, SetStateAction, useCallback } from 'react';\n\nimport create from 'zustand';\nimport { redux } from 'zustand/middleware';\n\ntype ExtractState<S> = S extends {\n  getState: () => infer T;\n} ? T : never;\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => (\n  isFunction(newValue) ? newValue(oldValue) : newValue\n);\n\n/**\n * Create a global store.\n *\n * It returns a set of functions\n * - `useStoreState`: a custom hook to read store state by key\n * - `getState`: a function to get store state by key outside React\n * - `dispatch`: a function to dispatch an action to store\n *\n * A store works somewhat similarly to Redux, but not the same.\n *\n * @example\n * import { createStore } from 'react-hooks-global-state';\n *\n * const initialState = { count: 0 };\n * const reducer = ...;\n *\n * const store = createStore(reducer, initialState);\n * const { useStoreState, dispatch } = store;\n *\n * const Component = () => {\n *   const count = useStoreState('count');\n *   ...\n * };\n */\nexport const createStore = <State extends object, Action extends { type: unknown }>(\n  reducer: Reducer<State, Action>,\n  initialState: State = (reducer as any)(undefined, { type: undefined }),\n  enhancer?: any,\n): Store<State, Action> => {\n  if (enhancer) return enhancer(createStore)(reducer, initialState);\n\n  const useStore = create(redux(reducer, initialState));\n\n  type BoundState = ExtractState<typeof useStore>;\n  type StateKeys = keyof BoundState;\n  const keys = Object.keys(initialState);\n\n  const useStoreState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const selector = useCallback(\n      (state: BoundState) => state[stateKey],\n      [stateKey],\n    );\n    return useStore(selector);\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn('[DEPRECATED] useStoreState instead');\n    }\n    const partialState = useStoreState(stateKey);\n    const updater = useCallback(\n      (update: SetStateAction<BoundState[StateKey]>) => {\n        useStore.setState((previousState) => ({\n          [stateKey]: updateValue(previousState[stateKey], update),\n        } as Pick<BoundState, StateKey> as Partial<BoundState>));\n      },\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  return {\n    useStoreState,\n    useGlobalState,\n    getState: useStore.getState,\n    dispatch: useStore.dispatch,\n  } as unknown as Store<State, Action>;\n};\n\ntype Store<State, Action> = {\n  useStoreState: <StateKey extends keyof State>(stateKey: StateKey) => State[StateKey];\n  /**\n   * useGlobalState created by createStore is deprecated.\n   *\n   * @deprecated useStoreState instead\n   */\n  useGlobalState: <StateKey extends keyof State>(stateKey: StateKey) => readonly [\n    State[StateKey],\n    (u: SetStateAction<State[StateKey]>) => void,\n  ];\n  getState: () => State;\n  dispatch: (action: Action) => Action;\n};\n"],"names":["keys","stateKey","includes","Error","initialState","useStore","create","Object","setGlobalState","update","process","env","NODE_ENV","validateStateKey","setState","previousState","newValue","_ref","useGlobalState","useCallback","state","selector","u","getGlobalState","getState","subscribe","listener","prevState","createStore","reducer","enhancer","undefined","type","redux","useStoreState","console","warn","dispatch"],"mappings":"+dAIyB,SAACA,EAAgBC,GACxC,IAAKD,EAAKE,SAASD,GACjB,UAAME,MAAA,IAAcF,EACrB,sEACF,sBA2BgC,SAAuBG,GACtD,IAAMC,EAAWC,EAAAA,QAAc,WAAMF,OAAAA,CAAN,GAGzBJ,EAAOO,OAAOP,KAAKI,GAELI,EAAG,SACrBP,EACAQ,GAE6B,eAAzBC,QAAQC,IAAIC,UACdC,EAAiBb,EAAMC,GAEzBI,EAASS,SAAS,SAACC,SApCsBC,eAqCtCf,GAvC4D,mBAEtBe,EAqCUP,GApC9BO,EAoCKD,EAAcd,IApCEe,EAmC1CC,CAAA,EAGD,EAiCD,MAAO,CACLC,eAhCqB,SAA6BjB,GACrB,eAAzBS,QAAQC,IAAIC,UACdC,EAAiBb,EAAMC,GAEzB,MAAiBkB,EAAWA,YAAC,SAACC,GAAiBA,OAAAA,EAAMnB,EAAxB,EAAmC,CAACA,IAMjE,MAAO,CALcI,EAASgB,GACdF,EAAAA,YACd,SAACG,GAAD,SAAuDrB,EAAUqB,EAAjE,EACA,CAACrB,IAGJ,EAsBCsB,eApBqB,SAA6BtB,GAIlD,MAH6B,eAAzBS,QAAQC,IAAIC,UACdC,EAAiBb,EAAMC,KAETuB,WAAWvB,EAC5B,EAgBCO,eAAAA,EACAiB,UAfgB,SAChBxB,EACAyB,GAEArB,EAASoB,UAAU,SAACL,EAAOO,GACrBP,EAAMnB,KAAc0B,EAAU1B,IAChCyB,EAASN,EAAMnB,GAElB,EACF,EAQF,gBC3C0B,SAAd2B,EACXC,EACAzB,EACA0B,GAEA,QAHA1B,IAAAA,IAAAA,EAAuByB,OAAgBE,EAAW,CAAEC,UAAMD,KAGtDD,EAAU,OAAOA,EAASF,EAATE,CAAsBD,EAASzB,GAEpD,IAAcC,EAAGC,EAAAA,QAAO2B,EAAAA,MAAMJ,EAASzB,IAIjCJ,EAAOO,OAAOP,KAAKI,GAEnB8B,EAAgB,SAA6BjC,GACpB,eAAzBS,QAAQC,IAAIC,UAlDK,SAACZ,EAAgBC,GACxC,IAAKD,EAAKE,SAASD,GACjB,MAAM,IAAAE,MAAA,IAAcF,EAAd,sEAET,CA+CKY,CAAiBb,EAAMC,GAEzB,MAAiBkB,EAAAA,YACf,SAACC,GAAsBA,OAAAA,EAAMnB,EAA7B,EACA,CAACA,IAEH,SAAgBoB,EACjB,EAmBD,MAAO,CACLa,cAAAA,EACAhB,eAnBqB,SAA6BjB,GAclD,MAb6B,eAAzBS,QAAQC,IAAIC,UAEduB,QAAQC,KAAK,sCAWR,CATcF,EAAcjC,GACnBkB,EAAAA,YACd,SAACV,GACCJ,EAASS,SAAS,SAACC,GAChBd,IAAAA,EA7DkCe,EA6DlCf,OAAAA,EAAAA,IAAAA,GA/DwD,mBAEtBe,EA6DcP,GA5DlCO,EA4DSD,EAAcd,IA5DFe,KA8DvC,EACD,CAACf,IAGJ,EAKCuB,SAAUnB,EAASmB,SACnBa,SAAUhC,EAASgC,SAEtB"}